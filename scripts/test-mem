#!/usr/bin/env node

/* global process setImmediate */

const Future = require('..');
const {log} = require('util');

const start = Date.now();
let batch = 0;
let stamp = Date.now();

const report = () => {
  const memMB = process.memoryUsage().rss / 1048576;
  const now = Date.now();
  const passed = now - stamp;
  batch = batch + 1;
  if(passed >= 5000){
    log(
      '-BATCH:', batch,
      '-OPS:', Math.round(batch / ((now - start) / passed) / (passed / 1000)),
      '-MEM:', memMB, 'MB'
    );
    stamp = now;
  }
};

const sync = Future.of;
const async = x => Future((l, r) => void setImmediate(r, x));

const cases = Object.create(null);

//Should infinitely run until finally running out of memory.
cases.syncHeadRecursion = function recur(){
  report();
  return sync('l').chain(recur).race(sync('r'));
};

//Should immediately exit with "l".
cases.syncDeepRecursion = function recur(){
  report();
  return sync('l').race(sync('r').chain(recur));
};

//Should infinitely run without any problems.
cases.syncTailRecursion = function recur(){
  report();
  return sync('l').race(sync('r')).chain(recur);
};

//Should immediately exit with "r".
cases.asyncHeadRecursion = function recur(){
  report();
  return async('l').chain(recur).race(async('r'));
};

//Should immediately exit with "l".
cases.asyncDeepRecursion = function recur(){
  report();
  return async('l').race(async('r').chain(recur));
};

//Should infinitely run without any problems.
cases.asyncTailRecursion = function recur(){
  report();
  return async('l').race(async('r')).chain(recur);
};

const f = cases[process.argv[2]];

if(typeof f !== 'function'){
  console.log('Usage:\n\n  test-mem <case>\n\nPossible cases:\n');
  Object.keys(cases).forEach(k => console.log(`  ${k}`));
  process.exit(1);
}

log('PID', process.pid);

const cancel = f().fork(
  e => {console.error(e.stack); process.exit(1)},
  v => {log('resolved', v); process.exit(2)}
);

process.once('SIGINT', () => {
  log('SIGINT caught. Cancelling...');
  cancel();
});
